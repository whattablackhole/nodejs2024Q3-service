// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  login        String        
  password     String
  version      Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  refreshToken RefreshToken?
}

model Track {
  id       String    @id @default(uuid())
  name     String
  duration Int
  artistId String?
  albumId  String?
  album    Album?    @relation(fields: [albumId], references: [id], onDelete: SetNull)
  artist   Artist?   @relation(fields: [artistId], references: [id], onDelete: SetNull)
  favTrack FavTrack?
}

model Album {
  id       String    @id @default(uuid())
  name     String
  year     Int
  artistId String?
  artist   Artist?   @relation(fields: [artistId], references: [id], onDelete: SetNull)
  tracks   Track[]
  favAlbum FavAlbum?
}

model Artist {
  id        String     @id @default(uuid())
  name      String
  grammy    Boolean
  albums    Album[]
  tracks    Track[]
  favArtist FavArtist?
}

model FavAlbum {
  id      String @id @default(uuid())
  albumId String @unique
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model FavArtist {
  id       String @id @default(uuid())
  artistId String @unique
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model FavTrack {
  id      String @id @default(uuid())
  trackId String @unique
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id     String @id @default(uuid())
  jwtId  String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  expire DateTime
}
